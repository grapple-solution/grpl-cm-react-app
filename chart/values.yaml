# Default values for myapp.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.


env: {}
# configuration for grapple ApplicationSet (gras)
gras-deploy:
  enabled: false
gras:
  enabled: true
  gras: {}
  grapi:
    # beimagetag: "v0.130"
    beimage: grpl/grapi
    beimagetag: 0.2.9
    discoveredrepos: true
    ingress: true
    ssl: true
    sslissuer: letsencrypt-grapple-demo
    initContainers:
      - name: wait-for-db
        spec:
          name: wait-for-db
          image: grpl/cm-data:data
          command:
            - bash
            - -c
            - |
              sleep 5;
              while ! mysql -h $(host) -P $(port) -u $(username) -p$(password) -e "show databases;" 2>/dev/null; do
                echo -n .;
                sleep 2;
              done;
              if mysql -h $(host) -P $(port) -u $(username) -p$(password) -e "USE classicmodels; SET @tablename := (select table_name from information_schema.tables where table_type = 'BASE TABLE' and table_schema = 'classicmodels' limit 1); set @qry1:= concat('select * from ',@tablename,' limit 1'); prepare stmt from @qry1 ; execute stmt ;" ; then
                echo "database already exists..."
              else
                echo "wait for database"
                while ! mysql -h $(host) -P $(port) -u $(username) -p$(password) -e "USE classicmodels; SET @tablename := (select table_name from information_schema.tables where table_type = 'BASE TABLE' and table_schema = 'classicmodels' limit 1); set @qry1:= concat('select * from ',@tablename,' limit 1'); prepare stmt from @qry1 ; execute stmt ;"; do
                  echo -n .;
                  sleep 2;
                done;
              fi
      - name: update-db-202502
        spec:
          name: update-db-202502
          image: mysql
          command:
            - bash
            - -c
            - |
              sleep 5;
              while ! mysql -h $(host) -P $(port) -u $(username) -p$(password) -e "show databases;" 2>/dev/null; do
                echo -n .;
                sleep 2;
              done;
              echo "db available now..."
              if mysql -h ${host} -P ${port} -u ${username} -p${password} -e "use classicmodels; SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME = 'employees_ibfk_1' AND CONSTRAINT_SCHEMA = 'classicmodels'; " | grep -i employees_ibfk_1; then
                echo "run the upgrade..."
                mysql -h ${host} -P ${port} -u ${username} -p${password} -e '
                  use classicmodels; 
                  ALTER TABLE `employees` DROP CONSTRAINT `employees_ibfk_1`;
                  ALTER TABLE orderdetails ADD COLUMN id varchar(100) AS (CONCAT(orderNumber, "|", productCode)) STORED FIRST;
                  -- drop constraints
                  ALTER TABLE orders DROP constraint `orders_ibfk_1`;
                  ALTER TABLE orderdetails DROP constraint `orderdetails_ibfk_1`;
                  ALTER TABLE orderdetails DROP constraint `orderdetails_ibfk_2`;
                  -- drop primary key
                  ALTER TABLE orderdetails DROP PRIMARY KEY, ADD PRIMARY KEY(id);
                  -- add constraints again
                  ALTER TABLE orderdetails ADD CONSTRAINT `orderdetails_ibfk_1` FOREIGN KEY (`orderNumber`) REFERENCES `orders` (`orderNumber`);
                  ALTER TABLE orderdetails ADD CONSTRAINT `orderdetails_ibfk_2` FOREIGN KEY (`productCode`) REFERENCES `products` (`productCode`);
                  ALTER TABLE orders ADD CONSTRAINT `orders_ibfk_1` FOREIGN KEY (`customerNumber`) REFERENCES `customers` (`customerNumber`);'
              else
                echo "update-db-202502 already patched"
              fi
    extraSecrets:
      - grpl-test-cm-conn-credential
    # volumes:
    #   - name: data
    #     emptyDir: {}
    #     # persistentVolumeClaim: 
    #     #   claimName: grapi-dbfile
    # volumeMounts:
    #   - name: data
    #     mountPath: /data
    # datasources:
    #   - name: "db"
    #     spec:
    #       memory:
    #         connector: "memory"
    #         name: "db"
    #         file: "/data/db.json"
    #         localStorage: "db"
    datasources:
      - name: classicmodels
        spec:
          mysql:
            database: classicmodels
            host: $(host)
            name: classicmodels
            password: $(password)
            port: $(port)
            url: ""
            user: $(username)
    discoveries:
      - name: classicmodels
        spec:
          all: true
          dataSource: classicmodels
          disableCamelCase: false
          schema: classicmodels
    # models:
    #   - name: "clients"
    #     spec:
    #       name: clients
    #       base: Entity
    #       properties:
    #         id:
    #           type: number
    #           id: true
    #           required: true
    #           generated: true
    #         customerName:
    #           type: string
    #         customerLastname:
    #           type: string
    #         contactFirstName:
    #           type: string
    #         phone:
    #           type: string
    #         addressLine1:
    #           type: string
    #         addressLine2:
    #           type: string
    #         city:
    #           type: string
    #         state:
    #           type: string
    #         postalCode:
    #           type: string
    #         country:
    #           type: string
    #         creditLimit:
    #           type: number
    # repositories:
    #   - name: classicmodels
    #     spec:
    #       datasource: classicmodels
    #       model: clients
    relations:
      - name: employeeNumber
        # content: '{"destinationModel":"Employees","foreignKeyName":"salesRepEmployeeNumber","registerInclusionResolver":true,"relationName":"employeeNumber","relationType":"belongsTo","sourceModel":"Customers"}'
        spec:
          destinationModel: Employees
          foreignKeyName: salesRepEmployeeNumber
          registerInclusionResolver: true
          relationName: employeeNumber
          relationType: belongsTo
          sourceModel: Customers
          # test cases:
          # http://localhost:3000/customers?filter={%22include%22:[%22employeeNumber%22]}
          # http://localhost:3000/customers/103/employees
      - name: offices
        # content: '{"destinationModel":"Offices","foreignKeyName":"officeCode","registerInclusionResolver":true,"relationName":"offices","relationType":"belongsTo","sourceModel":"Employees"}'
        spec:
          destinationModel: Offices
          foreignKeyName: officeCode
          registerInclusionResolver: true
          relationName: offices
          relationType: belongsTo
          sourceModel: Employees
          # test cases:
          # http://localhost:3000/employees?filter={%22include%22:[%22offices%22]}
          # http://localhost:3000/employees/1002/offices
      - name: officeemployees
        # content: '{"destinationModel":"Employees","foreignKeyName":"officeCode","registerInclusionResolver":true,"relationName":"officeemployees","relationType":"hasMany","sourceModel":"Offices"}'
        spec:
          destinationModel: Employees
          foreignKeyName: officeCode
          registerInclusionResolver: true
          relationName: officeemployees
          relationType: hasMany
          sourceModel: Offices
          # test cases:
          # http://localhost:3000/offices?filter={%22include%22:[%22officeemployees%22]}
          # http://localhost:3000/offices/1/employees
      - name: customers
        # content: '{"destinationModel":"Customers","foreignKeyName":"customerNumber","registerInclusionResolver":true,"relationName":"customers","relationType":"belongsTo","sourceModel":"Orders"}'
        spec:
          destinationModel: Customers
          foreignKeyName: customerNumber
          registerInclusionResolver: true
          relationName: customers
          relationType: belongsTo
          sourceModel: Orders
          # test cases:
          # http://localhost:3000/orders?filter={%22include%22:[%22customers%22]}
          # http://localhost:3000/orders/10100/customers
      - name: productlines
        # content: '{"destinationModel":"Productlines","foreignKeyName":"productlines","registerInclusionResolver":true,"relationName":"productlines","relationType":"belongsTo","sourceModel":"Products"}'
        spec:
          destinationModel: Productlines
          foreignKeyName: productLine
          registerInclusionResolver: true
          relationName: productlines
          relationType: belongsTo
          sourceModel: Products
          # test cases:
          # http://localhost:3000/products?filter={%22include%22:[%22productlines%22]}
          # http://localhost:3000/products/S10_1949/productlines
      - name: productlineproduct
        # content: '{"destinationModel":"Products","foreignKeyName":"productlines","registerInclusionResolver":true,"relationName":"productlineproduct","relationType":"hasMany","sourceModel":"Productlines"}'
        spec:
          destinationModel: Products
          foreignKeyName: productLine
          registerInclusionResolver: true
          relationName: productlineproduct
          relationType: hasMany
          sourceModel: Productlines
          # test cases:
          # http://localhost:3000/productlines?filter={%22include%22:[%22productlineproduct%22]}
          # http://localhost:3000/productlines/Classic%20Cars/products
      - name: customerorders
        # content: '{"destinationModel":"Orders","foreignKeyName":"customerNumber","registerInclusionResolver":true,"relationName":"customerorders","relationType":"hasMany","sourceModel":"Customers"}'
        spec:
          destinationModel: Orders
          foreignKeyName: customerNumber
          registerInclusionResolver: true
          relationName: customerorders
          relationType: hasMany
          sourceModel: Customers
          # test cases:
          # http://localhost:3000/customers?filter={%22include%22:[%22customerorders%22]}
          # http://localhost:3000/customers/103/orders
      - name: orders
        # content: '{"destinationModel":"Orders","foreignKeyName":"orderNumber","registerInclusionResolver":true,"relationName":"orders","relationType":"belongsTo","sourceModel":"Orderdetails"}'
        spec:
          destinationModel: Orders
          foreignKeyName: orderNumber
          registerInclusionResolver: true
          relationName: orders
          relationType: belongsTo
          sourceModel: Orderdetails
          # test cases:
          # http://localhost:3000/orderdetails/?filter={%22include%22:[%22orders%22]}
      - name: orderdetails
        # content: '{"destinationModel":"Orderdetails","foreignKeyName":"orderNumber","registerInclusionResolver":true,"relationName":"orderdetails","relationType":"hasMany","sourceModel":"Orders"}'
        spec:
          destinationModel: Orderdetails
          foreignKeyName: orderNumber
          registerInclusionResolver: true
          relationName: orderdetails
          relationType: hasMany
          sourceModel: Orders
          # test cases:
          # http://localhost:3000/orders?filter={%22include%22:[%22orderdetails%22]}
          # http://localhost:3000/orders/10100/orderdetails
          # http://localhost:3000/orderdetails/10107%7CS10_1678?filter={%22include%22:[%22orders%22]}
    restcruds:
      - name: "classicmodels"
        spec:
          datasource: "classicmodels"
    controllers: []
    postpatches: []
    injections: []
    prerelationpatches: []
  gruim:
    # uiimagetag: "0.1.38"
    uiimage: grpl/gruim
    uiimagetag: 0.2.9
    ssl: true
    sslissuer: letsencrypt-grapple-demo
    style: '{"colors":{"primary":{"DEFAULT":"#34344A","fg":"#fff"},"accent":{"DEFAULT":"#CC5A71","fg":"#fff"}}}'
    config: ""
    additionalpackages: ""
    custommodules: []
replicaCount: 1
image:
  repository: grpl/grapple-template-pr
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.1.45.pr-33"
imagetest:
  repository: apptest
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
podAnnotations: {}
podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 80
ingress:
  enabled: true
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  # hosts:
  #   - host: chart-example.local
  #     paths:
  #       - path: /
  #         pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
resources: {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
nodeSelector: {}
tolerations: []
affinity: {}
